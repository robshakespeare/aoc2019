using System.Collections.Generic;
using AoC.Day19;
using Common.Extensions;
using Common.IntCodes;
using FluentAssertions;
using NUnit.Framework;

namespace AoC.Tests.Day19
{
    public class Day19SolverTests
    {
        private readonly Day19Solver sut = new Day19Solver();

        [Test]
        [Ignore("takes too long!")]
        public void Part1ReTest()
        {
            // ACT
            var part1Result = sut.SolvePart1();

            // ASSERT
            part1Result.Should().Be(220);
        }

        [Test]
        [Ignore("takes too long!")]
        public void Part2ReTest()
        {
            // ACT
            var part2Result = sut.SolvePart2();

            // ASSERT
            part2Result.Should().Be(10010825);
        }

        [Test]
        public void Part2_TestCase1()
        {
            var input = @"#.......................................
.#......................................
..##....................................
...###..................................
....###.................................
.....####...............................
......#####.............................
......######............................
.......#######..........................
........########........................
.........#########......................
..........#########.....................
...........##########...................
...........############.................
............############................
.............#############..............
..............##############............
...............###############..........
................###############.........
................#################.......
.................##################.....
..................##################....
...................###################..
....................####################
.....................###################
.....................###################
......................##################
.......................#################
........................################
.........................###############
..........................##############
..........................##############
...........................#############
............................############
.............................###########".ReadAllLines();

            IEnumerable<string> YieldLine(IntCodeState intCodeState, int x, int y)
            {
                yield return input[y];
            }

            // ACT
            var part2Result = sut.SolvePart2("0", YieldLine, 10);

            // ASSERT
            part2Result.Should().Be(250020);
        }
    }
}
